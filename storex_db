this is the update sql with the verificatin token session and users table data

-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.accesories
(
    id uuid NOT NULL,
    type accessories_type NOT NULL,
    capacity text COLLATE pg_catalog."default",
    remark text COLLATE pg_catalog."default"
);

CREATE TABLE IF NOT EXISTS public.accounts
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    "userId" uuid NOT NULL,
    type character varying(255) COLLATE pg_catalog."default" NOT NULL,
    provider character varying(255) COLLATE pg_catalog."default" NOT NULL,
    "providerAccountId" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    refresh_token text COLLATE pg_catalog."default",
    access_token text COLLATE pg_catalog."default",
    expires_at bigint,
    id_token text COLLATE pg_catalog."default",
    scope text COLLATE pg_catalog."default",
    session_state text COLLATE pg_catalog."default",
    token_type text COLLATE pg_catalog."default",
    CONSTRAINT accounts_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.admin
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    email text COLLATE pg_catalog."default" NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    created_by uuid,
    archived_at timestamp with time zone,
    archived_by uuid,
    CONSTRAINT admin_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.assets
(
    brand text COLLATE pg_catalog."default" NOT NULL,
    model text COLLATE pg_catalog."default",
    serial_no text COLLATE pg_catalog."default",
    type asset_type NOT NULL,
    status asset_status NOT NULL,
    asset_type_id uuid NOT NULL DEFAULT gen_random_uuid(),
    purchase_date time with time zone NOT NULL,
    warranty_expire_date timestamp with time zone,
    owned_by text COLLATE pg_catalog."default" NOT NULL,
    created_by uuid,
    create_at timestamp with time zone NOT NULL,
    updated_by uuid,
    updated_at timestamp with time zone,
    archived_by uuid,
    archived_at timestamp with time zone,
    archive_reason text COLLATE pg_catalog."default",
    CONSTRAINT assets_pkey PRIMARY KEY (asset_type_id)
);

CREATE TABLE IF NOT EXISTS public.assigned_assets
(
    asset_id uuid NOT NULL,
    emp_id uuid NOT NULL,
    assigned_date timestamp with time zone NOT NULL,
    assigned_by uuid,
    revoke_date timestamp with time zone,
    revoke_reason text COLLATE pg_catalog."default",
    revoked_by uuid
);

CREATE TABLE IF NOT EXISTS public.employee
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default" NOT NULL,
    email text COLLATE pg_catalog."default" NOT NULL,
    phone integer NOT NULL,
    type employee_type NOT NULL,
    status employee_status NOT NULL,
    created_by uuid,
    create_at timestamp with time zone NOT NULL,
    updated_by uuid,
    updated_at timestamp with time zone,
    archived_by uuid,
    archived_at timestamp with time zone,
    archive_reason text COLLATE pg_catalog."default",
    CONSTRAINT "employee_PK" PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.harddrive
(
    id uuid NOT NULL,
    storage text COLLATE pg_catalog."default" NOT NULL
);

CREATE TABLE IF NOT EXISTS public.laptop
(
    id uuid NOT NULL,
    series text COLLATE pg_catalog."default" NOT NULL,
    ram text COLLATE pg_catalog."default" NOT NULL,
    operating_system text COLLATE pg_catalog."default" NOT NULL,
    screen_resolution text COLLATE pg_catalog."default" NOT NULL,
    storage text COLLATE pg_catalog."default" NOT NULL
);

CREATE TABLE IF NOT EXISTS public.mobile
(
    id uuid NOT NULL,
    os_type text COLLATE pg_catalog."default" NOT NULL,
    imei_1 text COLLATE pg_catalog."default" NOT NULL,
    imei_2 text COLLATE pg_catalog."default",
    ram text COLLATE pg_catalog."default" NOT NULL
);

CREATE TABLE IF NOT EXISTS public.monitor
(
    id uuid NOT NULL,
    screen_resolution text COLLATE pg_catalog."default" NOT NULL
);

CREATE TABLE IF NOT EXISTS public.pendrive
(
    id uuid NOT NULL,
    storage text COLLATE pg_catalog."default" NOT NULL
);

CREATE TABLE IF NOT EXISTS public.service
(
    asset_id uuid NOT NULL,
    reason text COLLATE pg_catalog."default" NOT NULL,
    sent_date timestamp with time zone NOT NULL,
    sent_by uuid,
    received_date timestamp with time zone,
    price integer,
    recived_remark text COLLATE pg_catalog."default",
    recived_by uuid
);

CREATE TABLE IF NOT EXISTS public.sessions
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    "userId" uuid NOT NULL,
    expires timestamp with time zone NOT NULL,
    "sessionToken" character varying(255) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT sessions_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.sim
(
    id uuid NOT NULL,
    phone integer NOT NULL,
    sim_no integer NOT NULL
);

CREATE TABLE IF NOT EXISTS public.users
(
    id uuid NOT NULL DEFAULT gen_random_uuid(),
    name text COLLATE pg_catalog."default",
    email text COLLATE pg_catalog."default",
    "emailVerified" timestamp with time zone,
    image text COLLATE pg_catalog."default",
    CONSTRAINT users_pkey PRIMARY KEY (id)
);

CREATE TABLE IF NOT EXISTS public.verification_token
(
    identifier text COLLATE pg_catalog."default" NOT NULL,
    expires timestamp with time zone NOT NULL,
    token text COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT verification_token_pkey PRIMARY KEY (identifier, token)
);

ALTER TABLE IF EXISTS public.accesories
    ADD CONSTRAINT accesories_id_fkey FOREIGN KEY (id)
    REFERENCES public.assets (asset_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.admin
    ADD CONSTRAINT fk_archived_by FOREIGN KEY (archived_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.admin
    ADD CONSTRAINT fk_created_by FOREIGN KEY (created_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.assets
    ADD CONSTRAINT fk_archived_by FOREIGN KEY (archived_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.assets
    ADD CONSTRAINT fk_created_by FOREIGN KEY (created_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.assets
    ADD CONSTRAINT fk_updated_by FOREIGN KEY (updated_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.assigned_assets
    ADD CONSTRAINT fk_asset_id FOREIGN KEY (asset_id)
    REFERENCES public.assets (asset_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.assigned_assets
    ADD CONSTRAINT fk_assigned_by FOREIGN KEY (assigned_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.assigned_assets
    ADD CONSTRAINT fk_emp_id FOREIGN KEY (emp_id)
    REFERENCES public.employee (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.assigned_assets
    ADD CONSTRAINT fk_revoked_by FOREIGN KEY (revoked_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee
    ADD CONSTRAINT fk_archived_by FOREIGN KEY (archived_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee
    ADD CONSTRAINT fk_created_by FOREIGN KEY (created_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.employee
    ADD CONSTRAINT fk_updated_by FOREIGN KEY (updated_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.harddrive
    ADD CONSTRAINT harddrive_id_fkey FOREIGN KEY (id)
    REFERENCES public.assets (asset_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.laptop
    ADD CONSTRAINT laptop_id_fkey FOREIGN KEY (id)
    REFERENCES public.assets (asset_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.mobile
    ADD CONSTRAINT mobile_id_fkey FOREIGN KEY (id)
    REFERENCES public.assets (asset_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.monitor
    ADD CONSTRAINT monitor_id_fkey FOREIGN KEY (id)
    REFERENCES public.assets (asset_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pendrive
    ADD CONSTRAINT pendrive_id_fkey FOREIGN KEY (id)
    REFERENCES public.assets (asset_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.service
    ADD CONSTRAINT fk_recived_by FOREIGN KEY (recived_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.service
    ADD CONSTRAINT fk_sent_by FOREIGN KEY (sent_by)
    REFERENCES public.admin (id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.sim
    ADD CONSTRAINT sim_id_fkey FOREIGN KEY (id)
    REFERENCES public.assets (asset_type_id) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;
